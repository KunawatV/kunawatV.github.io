{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","cod","console","log","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a1b4c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div className=\"Titles\">\r\n        <h1>Weather Finder</h1>\r\n        <p>Find out Temperature, conditions and more.</p>\r\n    </div>\r\n)\r\n\r\nexport default Titles;","import React from 'react'\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather} className='Form'>\r\n        <input type=\"text\" name=\"city\" className='City' placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" className='Country' placeholder=\"Country...\"/>\r\n        <button>Get Weather</button>\r\n     </form>\r\n)\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className='Weather'>\r\n        {props.city && props.country && <p>Loaction: <span>{props.city}, {props.country}</span></p>}\r\n        {props.temperature && <p>Temperature: <span>{props.temperature}</span></p>}\r\n        {props.humidity && <p>Humidity: <span>{props.humidity}</span></p>}\r\n        {props.description && <p>Conditions: <span>{props.description}</span></p>}\r\n        {props.error === 'error'? <p className='Error'>{props.error}</p>: '' }\r\n     </div>\r\n)\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css'\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '106ddaa1ad7a6de3d768c0ea17ce0058';\n\nclass App extends React.Component{\n\n    state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: undefined\n    }\n\n  getWeather = async (e) =>{\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`);\n  \n      const data = await api_call.json();\n      this.setState({\n        error: data.cod\n      })\n      \n      if (this.state.error !=='404' ){\n        console.log(data);\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n        });\n      } else{\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: 'error'\n        })\n      }\n    };\n\n  render() {\n    return(\n      <div className='Main'>\n        <div className='Box'>\n          <Titles />\n          <Form getWeather={this.getWeather}/>\n          <Weather \n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n          />\n        </div>\n        <h3 className='Kunawat'>Kunawat</h3>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}